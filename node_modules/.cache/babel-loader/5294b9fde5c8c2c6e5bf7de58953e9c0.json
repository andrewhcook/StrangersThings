{"ast":null,"code":"const BASEURL = \"https://strangers-things.herokuapp.com/api/2207-FTB-ET-WEB-PT\";\nconst makeHeaders = token => {\n  const headers = {\n    \"Content-Type\": \"application/json\"\n  };\n  if (token) {\n    headers['Authorization'] = `Bearer ${token}`;\n  }\n  return headers;\n};\nexport const apiCall = async function (endpoint) {\n  let defaultOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const {\n    token,\n    method,\n    body\n  } = defaultOptions;\n  console.log(\"body in apiCall\", body);\n  const options = {};\n  options.headers = makeHeaders(token);\n  if (method) {\n    options.method = method;\n  }\n  ;\n  if (body) {\n    options.body = JSON.stringify(body);\n  }\n  console.log(\"options in apiCall\", options);\n  const response = await fetch(`${BASEURL}/${endpoint}`, options);\n  const result = await response.json();\n  return result;\n};\nexport const fetchPosts = async function () {\n  let token = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  const {\n    success,\n    error,\n    data\n  } = await apiCall('posts', {\n    token: token,\n    method: \"GET\"\n  });\n  console.log(\"data: \", data.posts);\n  if (success) {\n    console.log(\"success! in fetchPosts()\");\n    return {\n      error: null,\n      posts_value: data.posts\n    };\n  } else {\n    console.log(\"failure :( in fetchPosts()\");\n    return {\n      error: \"Failed to Load apiCall in fetchPosts\",\n      posts_value: []\n    };\n  }\n};\nexport const registerUser = async (username, password) => {\n  try {\n    const {\n      success,\n      error,\n      data\n    } = await apiCall('users/register', {\n      token: null,\n      method: \"Post\",\n      body: {\n        user: {\n          username: username,\n          password: password\n        }\n      }\n    });\n    if (success) {\n      console.log(username, data.token);\n      return {\n        error: null,\n        token: data.token,\n        mesage: data.message\n      };\n    } else {\n      console.log(\"no success in registerUser()\", error);\n      return {\n        error: error.message,\n        token: null,\n        message: null\n      };\n    }\n  } catch (error) {\n    console.error(error);\n    return {\n      error: \"error in registeredUser() call\",\n      token: null,\n      message: null\n    };\n  }\n};\nexport const logInUser = async (username, password) => {\n  try {\n    const {\n      success,\n      error,\n      data\n    } = await apiCall('users/login', {\n      token: null,\n      method: \"Post\",\n      body: {\n        user: {\n          username: username,\n          password: password\n        }\n      }\n    });\n    if (success) {\n      console.log(username, data.token);\n      return {\n        error: null,\n        token: data.token,\n        mesage: data.message\n      };\n    } else {\n      alert(\"Incorrect User Credentials\");\n      console.log(\"no success in registerUser()\", error);\n      return {\n        error: error.message,\n        token: null,\n        message: null\n      };\n    }\n  } catch (error) {\n    console.error(error);\n    return {\n      error: \"error in registeredUser() call\",\n      token: null,\n      message: null\n    };\n  }\n};\nexport const isLoggedIn = function () {\n  let token = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  if (token) {\n    return true;\n  } else {\n    return false;\n  }\n};\nexport const CreatePost = async (token, post) => {\n  try {\n    const {\n      success,\n      error,\n      data\n    } = await apiCall('posts', {\n      token: token,\n      method: \"Post\",\n      body: {\n        post: post\n      }\n    });\n    if (success) {\n      return {\n        error: null,\n        post: data.post,\n        mesage: data.message\n      };\n    } else {\n      console.log(\"error in CreatePost\", error.message);\n      return {\n        error: error.message,\n        post: null,\n        message: null\n      };\n    }\n  } catch (error) {\n    console.error(error);\n    return {\n      error: \"error in CreatePost() call\",\n      post: null,\n      message: null\n    };\n  }\n};\n_c = CreatePost;\nexport const fetchUser = async token => {\n  try {\n    console.log(\"fetchUser() called\");\n    const {\n      success,\n      error,\n      data\n    } = await apiCall('users/me', {\n      token: token\n    });\n    console.log(\"fetchUser() data\", data);\n    if (success) {\n      return {\n        error: null,\n        userResponse: data,\n        mesage: data.message\n      };\n    } else {\n      return {\n        error: error.message,\n        userResponse: null,\n        message: null\n      };\n    }\n  } catch (error) {\n    console.error(error);\n    return {\n      error: \"error in FetchUser() call\",\n      userResponse: null,\n      message: null\n    };\n  }\n};\nexport const DeletePost = async (token, POST_ID) => {\n  console.log(\"DeletePost() called\");\n  await apiCall(`posts/${POST_ID}`, {\n    token: token,\n    method: \"DELETE\"\n  });\n};\n_c2 = DeletePost;\nexport const SendMessage = async (token, POST_ID, message) => {\n  console.log(\"SendMessage() called\");\n  await apiCall(`posts/${POST_ID}/messages`, {\n    token: token\n  }, {\n    method: \"POST\"\n  }, {\n    body: message\n  });\n};\n_c3 = SendMessage;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"CreatePost\");\n$RefreshReg$(_c2, \"DeletePost\");\n$RefreshReg$(_c3, \"SendMessage\");","map":{"version":3,"names":["BASEURL","makeHeaders","token","headers","apiCall","endpoint","defaultOptions","method","body","console","log","options","JSON","stringify","response","fetch","result","json","fetchPosts","success","error","data","posts","posts_value","registerUser","username","password","user","mesage","message","logInUser","alert","isLoggedIn","CreatePost","post","fetchUser","userResponse","DeletePost","POST_ID","SendMessage"],"sources":["/home/ahc/Bootcamp2022UBUNTU/course_work/NewStrangersThings/StrangersThings/src/api/Requests.js"],"sourcesContent":["\n\n\nconst BASEURL = \"https://strangers-things.herokuapp.com/api/2207-FTB-ET-WEB-PT\";\n\n\n\n\nconst makeHeaders = (token) => {\n  const headers = {\n    \"Content-Type\": \"application/json\",\n  };\n\n  if (token) {\n    headers['Authorization'] = `Bearer ${token}`;\n  }\n\n  return headers;\n};\n\nexport const apiCall = async (endpoint, defaultOptions= {}) => {\n  const {token, method, body} = defaultOptions;\n  console.log(\"body in apiCall\", body);\n  const options = {};\n  options.headers = makeHeaders(token);\n  if (method) {\n    options.method = method;\n  };\n  if (body) {\n    options.body = JSON.stringify(body);\n  }\n    console.log(\"options in apiCall\", options);\n    const response = await fetch(`${BASEURL}/${endpoint}`, options);\n    const result = await response.json();\n    return result;\n}\n\nexport const fetchPosts = async (token = null)=> {\n  const {success, error, data} = await apiCall('posts', {token:token, method:\"GET\"});\n  console.log(\"data: \", data.posts);\n  if (success) {\n    console.log(\"success! in fetchPosts()\");\n    return {\n      error: null,\n      posts_value: data.posts\n    }\n  } else {\n    console.log(\"failure :( in fetchPosts()\")\n    return {\n      error: \"Failed to Load apiCall in fetchPosts\",\n      posts_value: []\n    }\n  }\n}\n\nexport const registerUser = async (username, password) => {\n  try {\n    const {success, error, data} = await apiCall('users/register', {token: null, method: \"Post\", body: {user: {username: username,\n    password: password}}} );\n    if (success) {\n      console.log(username, data.token)\n      return {\n        error: null,\n        token: data.token,\n        mesage: data.message\n      }\n    } else {\n      console.log(\"no success in registerUser()\", error);\n      return {\n        error: error.message,\n        token: null,\n        message: null\n      }\n    }\n  } catch (error){\n    console.error(error);\n    return {\n      error: \"error in registeredUser() call\",\n      token: null,\n      message: null\n    }\n  }\n}\n\nexport const logInUser = async (username, password) => {\n  try {\n    const {success, error, data} = await apiCall('users/login', {token: null, method: \"Post\", body: {user: {username: username,\n    password: password}}} );\n    if (success) {\n      console.log(username, data.token)\n      return {\n        error: null,\n        token: data.token,\n        mesage: data.message\n      }\n    } else {\n      alert(\"Incorrect User Credentials\");\n      console.log(\"no success in registerUser()\", error);\n      return {\n        error: error.message,\n        token: null,\n        message: null\n      }\n    }\n  } catch (error){\n    console.error(error);\n    return {\n      error: \"error in registeredUser() call\",\n      token: null,\n      message: null\n    }\n  }\n}\n\nexport const isLoggedIn = (token = null) => {\n  if (token) {return true} else {\n    return false\n  }\n}\n\nexport const CreatePost = async (token, post) => {\n  try {\n    const {success, error, data} = await apiCall('posts', {token: token, method: \"Post\", body: {post: post}} );\n    if (success) {\n      return {\n        error: null,\n        post: data.post,\n        mesage: data.message\n      }\n    } else {\n      console.log(\"error in CreatePost\", error.message);\n      return {\n        error: error.message,\n        post: null,\n        message: null\n      }\n    }\n  } catch (error){\n    console.error(error);\n    return {\n      error: \"error in CreatePost() call\",\n      post: null,\n      message: null\n    }\n  }\n}\n\nexport const fetchUser = async (token) => {\n  try {\n    console.log(\"fetchUser() called\");\n    const {success, error, data} = await apiCall('users/me', {token:token});\n    console.log(\"fetchUser() data\", data);\n    if (success) {\n      return {\n        error: null,\n        userResponse: data,\n        mesage: data.message\n      }\n    } else {\n      return {\n        error: error.message,\n        userResponse: null,\n        message: null\n      }\n    }\n  } catch (error){\n    console.error(error);\n    return {\n      error: \"error in FetchUser() call\",\n      userResponse: null,\n      message: null\n    }\n  }\n}\n\nexport const DeletePost = async (token, POST_ID) => {\n  console.log(\"DeletePost() called\");\n  await apiCall(`posts/${POST_ID}`, {token:token, method: \"DELETE\"});\n   \n}\n\nexport const SendMessage = async (token, POST_ID, message) => {\n  console.log(\"SendMessage() called\");\n  await apiCall(`posts/${POST_ID}/messages`, {token: token}, {method: \"POST\"}, {body:message})\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}